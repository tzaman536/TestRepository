@using SimplexInvoiceModel;
@{
    ViewBag.Title = "Job Ticket";
}

<h2 class="first-line page-description">Add/Update Job Ticket <a id="restInputForm" onclick="resetInputForm()"> [ Click to reset input form]</a></h2>

<div style="display:table;">
    <div style="display:table-row">
        <div id="idJobTicketUploadForm" class="ticketInputForm">
            <input type="hidden" id="idJobTicketId" name="JobTicketId" value="0"/>
            <input type="hidden" id="idCompanyId" name="CompanyId" value="0" />
            <dl>
                <dt>
                        Client:
                </dt>
                <dd>
                    @(Html.Kendo().DropDownList()
                      .Name("clients")
                      .DataTextField("ClientName")
                      .DataValueField("ClientID")
                      .DataSource(source =>
                      {
                          source.Read(read =>
                          {
                              read.Action("GetClientNames", "ReferenceData");
                          });
                      })
                      .Events(e =>
                        {
                            e.Select("onSelectClientName");
                        })

                      .HtmlAttributes(new { style = "width: 250px;" })
                    )
                </dd>
                <dt>
                    Job Date:
                </dt>
                <dd>
                    @(Html.Kendo().DatePicker()
                      .Name("datepickerJobDate")
                      .Value(DateTime.Today)
                      .HtmlAttributes(new { style = "width: 250px;" })
                    )
                </dd>
                <dt>
                    Delivery Date:
                </dt>
                <dd>
                    @(Html.Kendo().DatePicker()
                      .Name("datepickerDeliveryDate")
                      .Value(DateTime.Today)
                      .HtmlAttributes(new { style = "width: 250px;" })
                    )
                </dd>

                <dt>Quantity:</dt><dd><input type="number" class="k-textbox numberOfUnits" id="idQuantity" name="Quantity" data-role='maskedtextbox' onchange="calcTotalCharge(this.value)" required /></dd>
                <dt>Weight:</dt><dd><input type="number" class="k-textbox numberOfUnits" id="idWeight" name="Weight" data-role='maskedtextbox' onchange="calcTotalCharge(this.value)" required /></dd>
                <dt>Base Pickup Charge:</dt><dd><input type="number" class="k-textbox numberOfUnits" id="idBasePickupCharge" name="Base PU" data-role='maskedtextbox' onchange="calcTotalCharge(this.value)" required /></dd>
                <dt>Milage:</dt><dd><input type="number" class="k-textbox numberOfUnits" id="idMilage" name="Milage" data-role='maskedtextbox' onchange="calcTotalCharge(this.value)"/></dd>
                <dt>Toll:</dt><dd><input type="number" class="k-textbox numberOfUnits" id="idToll" name="Toll" data-role='maskedtextbox' onchange="calcTotalCharge(this.value)" required /></dd>
                <dt>Fuel Surcharge:</dt><dd><input type="number" class="k-textbox numberOfUnits" id="idFuelSurcharge" name="Fuel Charge" data-role='maskedtextbox' onchange="calcTotalCharge(this.value)" required /></dd>
                <dt>Misc. Service:</dt><dd><input type="number" class="k-textbox numberOfUnits" id="idMiscService" name="Misc. Service" data-role='maskedtextbox' onchange="calcTotalCharge(this.value)"/></dd>
                <dt class="total-row" >Total Charge:</dt><dd class="total-row"><input type="number" class="k-textbox numberOfUnits" id="idTotalCharge" name="Total Charge" data-role='maskedtextbox' /></dd>
                <dt>Waiting Time:</dt><dd><input type="text" class="k-textbox instruction" id="idWaitingTime" name="Wait Time" data-role='maskedtextbox' /></dd>
                <dt>Pickup From:</dt><dd>
                    @(Html.Kendo().DropDownList()
                      .Name("pickUpLocation")
                      .DataTextField("Location")
                      .DataValueField("LocationID")
                      .DataSource(source =>
                      {
                          source.Read(read =>
                          {
                              read.Action("GetPickupAndDeliveryLocation", "ReferenceData");
                          });
                      })
                      .Events(e =>
                        {
                            e.Select("onSelectPickupFrom");
                        })

                      .HtmlAttributes(new { style = "width: 250px;" })
                    )
                    <textarea id="idPickupFrom" name="Pickup From" class="k-textbox addressArea" rows="4" cols="20" required></textarea>
                </dd>
                <dt>P/U From Contact:</dt><dd><input type="text" class="k-textbox instruction" id="idPUFromContact" name="PU From Contact" data-role='maskedtextbox'  required /></dd>
                <dt>P/U From Number:</dt><dd><input type="text" class="k-textbox input-phone" id="idPUFromNumber" name="PU From Number" data-role='maskedtextbox' data-mask="999-000-0000" required /></dd>
                
                <dt>Deliver To:</dt>
                <dd>
                    @(Html.Kendo().DropDownList()
                      .Name("deliveryLocation")
                      .DataTextField("Location")
                      .DataValueField("LocationID")
                      .DataSource(source =>
                      {
                          source.Read(read =>
                          {
                              read.Action("GetPickupAndDeliveryLocation", "ReferenceData");
                          });
                      })
                      .Events(e =>
                        {
                            e.Select("onSelectDeliverTo");
                        })

                      .HtmlAttributes(new { style = "width: 250px;" })
                    )
                    <textarea id="idDeliverTo" name="Deliver To" class="k-textbox addressArea" rows="4" cols="20" required></textarea>
                </dd>
                <dt>Deliver To Contact:</dt><dd><input type="text" class="k-textbox instruction" id="idDeliverToContact" name="Deliver To Contact" data-role='maskedtextbox' required /></dd>
                <dt>Deliver To Number:</dt><dd><input type="text" class="k-textbox input-phone" id="idDeliverToNumber" name="Deliver To Number" data-role='maskedtextbox' data-mask="999-000-0000" required /></dd>
                <dt>Instructions:</dt><dd><input type="text" class="k-textbox instruction" id="idInstruction" name="instruction"  /></dd>
                <dt>Service Type:</dt>
                <dd>
                    @(Html.Kendo().DropDownList()
                      .Name("serviceTypeDDL")
                      .DataTextField("Name")
                      .DataValueField("ServiceTypeID")
                      .DataSource(source =>
                      {
                          source.Read(read =>
                          {
                              read.Action("GetSeviceTypes", "ReferenceData");
                          });
                      })
                      .Events(e =>
                        {
                            e.Select("onSelectServiceType");
                        })

                      .HtmlAttributes(new { style = "width: 250px;" })
                    )
                </dd>
                <dt>Delivery Agent:</dt>
                <dd>
                    @(Html.Kendo().DropDownList()
                      .Name("deliveryAgentDDL")
                      .DataTextField("Name")
                      .DataValueField("DeliveryAgentID")
                      .DataSource(source =>
                      {
                          source.Read(read =>
                          {
                              read.Action("GetDeliveryAgent", "ReferenceData");
                          });
                      })
                      .Events(e =>
                        {
                            e.Select("onSelectDeliveryAgent");
                        })

                      .HtmlAttributes(new { style = "width: 250px;" })
                    )
                </dd>
                <dt>POD:</dt><dd><input type="text" class="k-textbox instruction" id="idPOD" name="POD" /></dd>
                <dt>Comments:</dt><dd><input type="text" class="k-textbox instruction" id="idComment" name="Comment" /></dd>
                <dt>&nbsp;</dt><dd><input id="btn_SaveJobTicket" type="submit" class="button_Save button-border" value="Save" /></dd>
            </dl>
        </div>
        <div id="idJobTicketBookedToday" style="display:table-cell;min-width:500px; vertical-align:top; box-sizing: border-box; padding-right: 10px; padding-left:10px;">
            @(Html.Kendo().Grid<JobTicket>()
                    .Name("JobTicketGrid")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.JobTicketId).Width(100);
                        columns.Bound(p => p.ClientName).Width(100);
                        columns.Bound(p => p.ServiceType).Width(100);
                        columns.Bound(p => p.PickupFrom).Width(255);
                        columns.Bound(p => p.DeliverTo).Width(85);
                        ////columns.Command(command => { command.Edit(); command.Destroy(); }).Width(250);
                    })
                    .ToolBar(toolbar =>
                    {
                        //toolbar.Create();
                        //toolbar.Save();
                    })
                    //.Editable(editable => editable.Mode(GridEditMode.InCell))
                    //.Editable(editable => editable.Mode(GridEditMode.InLine))
                    //.Pageable()
                    .Filterable()
                    .Navigatable()
                    .Sortable()
                    .Selectable(selectable => selectable
                            .Mode(GridSelectionMode.Single)
                            .Type(GridSelectionType.Row))
                    //.Scrollable()
                    .Events(events => events.Change("onChange"))
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Batch(false)
                        .PageSize(1000)
                        .ServerOperation(false)
                        .Events(events => events.Error("error_handler").RequestEnd("onRequestEnd"))
                        //.Model(model => model.Id(p => p.ProductID))
                        .Model(model =>
                        {
                            model.Id(p => p.JobTicketId);
                            model.Field(p => p.ClientName).Editable(false);
                            model.Field(p => p.ServiceType).Editable(false);
                            model.Field(p => p.PickupFrom).Editable(false);
                            model.Field(p => p.DeliverTo).Editable(false);

                        })
                        .Read("Editing_Read", "JobTicket")
                      ))
        </div>
    </div>
</div>





<script>

    function resetInputForm()
    {
        location.reload();
    }
    function Init(e)
    {

        document.getElementById("idJobTicketId").value = e.JobTicketId;
        document.getElementById("idCompanyId").value = e.CompanyId;

        $("#clients").data("kendoDropDownList").select(function (dataItem) {
            return dataItem.ClientName === e.ClientName;
        });
        $("#datepickerJobDate").data("kendoDatePicker").value(e.JobDate);
        $("#datepickerDeliveryDate").data("kendoDatePicker").value(e.DeliveryDate);

        document.getElementById("idQuantity").value = e.Quantity;
        document.getElementById("idWeight").value = e.Weight;
        document.getElementById("idBasePickupCharge").value = e.BasePickupCharge;
        document.getElementById("idMilage").value = e.Milage;
        document.getElementById("idToll").value = e.Toll;
        document.getElementById("idFuelSurcharge").value = e.FuelSurcharge;
        document.getElementById("idMiscService").value = e.MiscFee
        document.getElementById("idTotalCharge").value = e.TotalCharge;
        document.getElementById("idWaitingTime").value = e.WaitTime;

        $("#pickUpLocation").data("kendoDropDownList").select(function (dataItem) {
            return dataItem.Location === e.PickupFrom;
        });
        document.getElementById("idPickupFrom").value = e.PickupFrom;

        $("#deliveryLocation").data("kendoDropDownList").select(function (dataItem) {
            return dataItem.Location === e.DeliverTo;
        });
        document.getElementById("idDeliverTo").value = e.DeliverTo;
        document.getElementById("idInstruction").value = e.Instruction;
        $("#serviceTypeDDL").data("kendoDropDownList").select(function (dataItem) {
            return dataItem.Name === e.ServiceType;
        });
        $("#deliveryAgentDDL").data("kendoDropDownList").select(function (dataItem) {
            return dataItem.Name === e.DeliveryAgent;
        });
        document.getElementById("idPOD").value = e.POD;
        document.getElementById("idComment").value = e.Comments;

        document.getElementById("idPUFromContact").value = e.PickupFromContact;
        document.getElementById("idPUFromNumber").value = e.PickupFromPhone
        document.getElementById("idDeliverToContact").value = e.DeliverToContact;
        document.getElementById("idDeliverToNumber").value = e.DeliverToPhone;


    }


        function onChange(arg) {
            var grid = $("#JobTicketGrid").data("kendoGrid");
            var selectedItem = grid.dataItem(grid.select());

            loadJobTicket(selectedItem.JobTicketId);



        }

        function loadJobTicket(jobTicketId) {
            var parms = {
                jobTicketId: jobTicketId
            };


            $.ajax({
                type: "GET",
                traditional: true,
                url: '@Url.Action("GetJobTicketInfo", "JobTicket")',
                async: true,
                data: parms,
                dataType: "json",
                beforeSend: function (xhr) {
                    $('#loader').show();
                },
                success: function (response, textStatus, jqXHR) {
                    $('#loader').hide();
                    Init(response.message);
                    //alert(response.message.ClientName)
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert("Error found during execution");
                    $('#loader').hide();
                }
            });

        }

        function onRequestEnd(e) {

            if (e.type == "update" && !e.response.Errors) {
                alert("product updated");
            }

            if (e.type == "destroy" && !e.response.Errors) {
                alert("Producdt deleted");
            }

        }

        function error_handler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
        }


    $(document).ready(function () {
        validateUploadForm();
        var jobTicketId = @Html.Raw(Json.Encode(ViewData["JOB_TICKET_ID"]));
        //alert(jobTicketId);
        if(jobTicketId != null)
            loadJobTicket(jobTicketId);

    });



    function calcTotalCharge(value) {

        var inputQuantity = document.getElementById("idQuantity").value;
        if (inputQuantity == null || inputQuantity == "")
            inputQuantity = 0;
        var inputWeight = document.getElementById("idWeight").value;
        if (inputWeight == null || inputWeight == "")
            inputWeight = 0;
        var inputBasePickupCharge = document.getElementById("idBasePickupCharge").value;
        if (inputBasePickupCharge == null || inputBasePickupCharge == "")
            inputBasePickupCharge = 0;

        var inputMilage = document.getElementById("idMilage").value;
        if (inputMilage == null || inputMilage == "")
            inputMilage = 0;

        var inputToll = document.getElementById("idToll").value;
        if (inputToll == null || inputToll == "")
            inputToll = 0;

        var inputFuelSurcharge = document.getElementById("idFuelSurcharge").value;
        if (inputFuelSurcharge == null || inputFuelSurcharge == "")
            inputFuelSurcharge = 0;

        var inputMiscCharges = document.getElementById("idMiscService").value;
        if (inputMiscCharges == null || inputMiscCharges == "")
            inputMiscCharges = 0;


        var inputClient = $("#clients").data("kendoDropDownList").text();
        if (inputClient == null || inputClient == "") {
            alert("Please pick a valid client");
            //return;
        }


        var chargeParameters = {
            "InputQuantity": inputQuantity,
            "InputWeight": inputWeight,
            "InputBasePickupCharge": inputBasePickupCharge,
            "InputMilage": inputMilage,
            "InputToll": inputToll,
            "InputFuelSurcharge": inputFuelSurcharge,
            "InputMiscCharges": inputMiscCharges,
            "InputClient": inputClient,
        };

        var parms = {
            inputChargeParameters: JSON.stringify(chargeParameters)
        };




        $.ajax({
            type: "POST",
            traditional: true,
            url: '@Url.Action("CalcTotalCharge", "JobTicket")',
            async: true,
            data: parms,
            dataType: "json",
            beforeSend: function (xhr) {
                //$('#loader').show();
            },
            success: function (response, textStatus, jqXHR) {
                document.getElementById("idTotalCharge").value = response.message.Charge;
                //alert(response.message);

            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Error found during execution");
            }
        });
    }



    function validateUploadForm() {


        $("#btn_SaveJobTicket").bind("click", function () {
            var validator = $("#idJobTicketUploadForm").kendoValidator().data("kendoValidator");
            if (!validator.validate()) {
                return false;
            }

            var jobTicket = {
                "JobTicketId": document.getElementById("idJobTicketId").value,
                "CompanyId": document.getElementById("idCompanyId").value,
                "ClientName" : $("#clients").data("kendoDropDownList").text(),
                "JobDate": $("#datepickerJobDate").data("kendoDatePicker").value(),
                "DeliveryDate": $("#datepickerDeliveryDate").data("kendoDatePicker").value(),
                "Quantity" : document.getElementById("idQuantity").value,
                "Weight" : document.getElementById("idWeight").value,
                "Milage" : document.getElementById("idMilage").value,
                "Toll" : document.getElementById("idToll").value,
                "FuelSurcharge" : document.getElementById("idFuelSurcharge").value,
                "MiscFee" : document.getElementById("idMiscService").value,
                "TotalCharge" : document.getElementById("idTotalCharge").value,
                "WaitTime" : document.getElementById("idWaitingTime").value,
                "PickupFrom" : document.getElementById("idPickupFrom").value,
                "DeliverTo" : document.getElementById("idDeliverTo").value,
                "Instruction" : document.getElementById("idInstruction").value,
                "ServiceType" : $("#serviceTypeDDL").data("kendoDropDownList").text(),
                "DeliveryAgent" : $("#deliveryAgentDDL").data("kendoDropDownList").text(),
                "POD" : document.getElementById("idPOD").value,
                "Comments": document.getElementById("idComment").value,
                "PickupFromContact" : document.getElementById("idPUFromContact").value,
                "PickupFromPhone" : document.getElementById("idPUFromNumber").value,
                "DeliverToContact" : document.getElementById("idDeliverToContact").value,
                "DeliverToPhone" : document.getElementById("idDeliverToNumber").value
            }


            var parms = {
                inputJobTicket: JSON.stringify(jobTicket)
            };




            $.ajax({
                type: "POST",
                traditional: true,
                url: '@Url.Action("SaveJobTicket", "JobTicket")',
                async: true,
                data: parms,
                dataType: "json",
                beforeSend: function (xhr) {
                    //$('#loader').show();
                },
                success: function (response, textStatus, jqXHR) {
                    alert("Job ticket saved");
                    location.reload();

                    //alert(response.message);

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert("Error found during execution");
                }
            });



        });
    }

    function onSelectClientName(e) {
        //alert(e.item[0].innerText);

        var parms = {
            inputClient: e.item[0].innerText
        };


        $.ajax({
            type: "POST",
            traditional: true,
            url: '@Url.Action("GetClientDefaults", "JobTicket")',
            async: true,
            data: parms,
            dataType: "json",
            beforeSend: function (xhr) {
                //$('#loader').show();
            },
            success: function (response, textStatus, jqXHR) {
                document.getElementById("idBasePickupCharge").value = response.message.BasePickupCharge;
                //alert(response.message);

            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Error found during execution");
            }
        });
    }
    function onSelectPickupFrom(e) {
        //alert(e.item[0].innerText);
        document.getElementById("idPickupFrom").value = e.item[0].innerText;
    }
    function onSelectDeliverTo(e) {
        //alert(e.item[0].innerText);
        document.getElementById("idDeliverTo").value = e.item[0].innerText;
    }
    function onSelectServiceType(e) {
        //alert(e.item[0].innerText);
        //document.getElementById("idPickupFrom").value = e.item[0].innerText;
    }
    function onSelectDeliveryAgent(e) {
        //alert(e.item[0].innerText);
        //document.getElementById("idPickupFrom").value = e.item[0].innerText;
    }


</script>
<style>

    .ticketInputForm{
        min-width:500px; 
        display:table-cell;
        border-radius: 25px; /* Gives any image a round corner */
        /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#cedce7+0,596a72+100 */
        background: rgb(206,220,231); /* Old browsers */
        background: -moz-linear-gradient(top, rgba(206,220,231,1) 0%, rgba(89,106,114,1) 100%); /* FF3.6-15 */
        background: -webkit-linear-gradient(top, rgba(206,220,231,1) 0%,rgba(89,106,114,1) 100%); /* Chrome10-25,Safari5.1-6 */
        background: linear-gradient(to bottom, rgba(206,220,231,1) 0%,rgba(89,106,114,1) 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#cedce7', endColorstr='#596a72',GradientType=0 ); /* IE6-9 */

    }
        .instruction{
        min-width:250px; 
        min-height:5px;
    }
        .addressArea{
        min-width:250px; 
        max-height:50px;
    }

    .total-row{
        font-weight:bolder;
        font-size:12px;
    }

    .idJobTicketBookedToday * {
        padding-right:5px;

    }

    .button-border{
        padding:2px 2px 2px 2px;
        margin-top:10px;
        margin-bottom:5px;
    }
</style>
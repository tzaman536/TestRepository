@using Kendo.Mvc.UI
@using SimplexInvoiceModel;

@{
    ViewBag.Title = "Invoices";
}

@*<link rel="stylesheet" href="~/Content/PrintSetup.css" type="text/css" />*@

<div id="divMenuAndGrid" style="display:table; margin-left: 1px; margin-top:10px;">
    <div style="display:table-row">
        <div id="divMenu" style="display:table-cell; padding-right:5px;min-width:300px;">
            
        </div>
        <div style="display:table-cell; padding-right:5px;min-width:50px;">

        </div>
        <div id="divAllInvoices" style="display:table-cell;min-width:1200px;margin-left:1px; margin-top:1px; vertical-align:top; ">
            @(Html.Kendo().Grid<ClientCompany>()
            .Name("AllInvoicesGrid")
            .Columns(columns =>
            {
                columns.Bound(p => p.CompanyName).Width(100);
                columns.Bound(p => p.Email).Width(100);
                columns.Bound(p => p.WeightRate).Width(255);
                columns.Bound(p => p.BasePickupCharge).Width(85);
                columns.Bound(p => p.State).Width(85);
                columns.Bound(p => p.MobileNumber).Width(85);
                columns.Command(command => { command.Edit(); command.Destroy(); }).Width(250);
            })
            .ToolBar(toolbar =>
            {
                //toolbar.Create();
                //toolbar.Save();
            })
            //.Editable(editable => editable.Mode(GridEditMode.InCell))
            .Editable(editable => editable.Mode(GridEditMode.InLine))
            //.Pageable()
            .Filterable()
            .Navigatable()
            .Sortable()
            .Selectable(selectable => selectable
                    .Mode(GridSelectionMode.Single)
                    .Type(GridSelectionType.Row))
            //.Scrollable()
            .Events(events => events.Change("onChange"))
            .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(false)
                .PageSize(1000)
                .ServerOperation(false)
                .Events(events => events.Error("error_handler").RequestEnd("onRequestEnd"))
                //.Model(model => model.Id(p => p.ProductID))
                .Model(model =>
                {
                    model.Id(p => p.ClientCompanyId);
                    model.Field(p => p.CompanyName).Editable(false);
                    model.Field(p => p.Email).Editable(false);
                    model.Field(p => p.WeightRate).Editable(false);
                    model.Field(p => p.BasePickupCharge).Editable(false);
                    model.Field(p => p.State).Editable(true);
                    model.Field(p => p.MobileNumber).Editable(false);
                    model.Field(p => p.ContactPerson).Editable(false);

                })


                                .Create("Editing_Create", "MyClients")
                                .Read("Editing_Read", "MyClients")
                                .Update("Editing_Update", "MyClients")
                                .Destroy("Editing_Destroy", "MyClients")
                            )
            )
        </div>
        <div id="loader" style="display:none; font:bold; color:darkblue">Saving.... Please wait</div>
    </div>
</div>


<div style="display:table; margin-left: 1px; margin-top:10px;">
    <div style="display:table-row">
        <div id="puform" style="display:table-cell; padding-right:5px;">


            <div id="divInvoice">
                <div style="min-width:800px;  background: rgb(206,220,231)">
                    <style>
                        dl { 
                            width: 100%; 
                            overflow: hidden;
                            background: rgb(206,220,231);
                            padding: 0;margin: 0;

                        } 
                        dt {
                            float: left;
                            width: 50%;
                            background: rgb(206,220,231);
                            padding: 0; margin: 0;

                        }
                        dd {
                            float: left;
                            width: 50%;
                            background: rgb(206,220,231);
                            padding: 0;
                            margin: 0;

                        }

                    </style>

                    <div id="divInvoiceDetail" style="display:table; margin-left: 1px; margin-top:10px;">
                        <div style="display:table-row">
                            <div id="divCompanyNameAndAddress" style="display:table-cell; padding-right:5px;min-width:300px;">

                            </div>
                            <div style="display:table-cell; padding-right:5px;min-width:250px;">

                            </div>
                            <div id="divCompanyPhoneAndFax" style="display:table-cell;margin-left:1px; margin-top:1px; vertical-align:top; ">
                            </div>
                        </div>
                        <div style="display:table-row">
                            <div id="mistDtDDSection" style="display:table-cell; padding-right:5px;min-width:300px;">
                                <dl>
                                    <dt>Coffee:</dt>
                                    <dd>Black hot drink</dd>
                                    <dt>Milk:</dt>
                                    <dd>White cold drink</dd>
                                </dl>
                            </div>
                            <div style="display:table-cell; padding-right:5px;min-width:50px;">

                            </div>
                            <div style="display:table-cell;min-width:1200px;margin-left:1px; margin-top:1px; vertical-align:top; ">
                            </div>
                        </div>

                    </div>
                    
                </div>
            </div>
            <form id="registration">
                <table class="inputFormTable">
                    <tr>
                        <td>
                            

                            <h2 class="bodyMainMessage1">Client Setup:</h2>
                            <div class="editor-label"><label for="cname">Company Name: <div></div></label></div>
                            <div class="editor-field"><input type="text" id="cname" name="Company Name" class="k-textbox input-name" required data-bind="value: companyName" /></div>
                            <div class="editor-label"><label for="contactPerson">Contact Person:</label></div>
                            <div class="editor-field"><input type="text" id="contactPerson" name="Contact Person" class="k-textbox input-name" required data-bind="value: contactPerson" /></div>
                            <div class="editor-label"><label for="addressLine1">Address Line 1:</label></div>
                            <div class="editor-field"><input id="addressLine1" name="Address Line 1" class="k-textbox input-name" required data-bind="value: addressLine1" /></div>
                            <div class="editor-label"><label for="addressLine2">Address Line 2 (optional):</label></div>
                            <div class="editor-field"><input id="addressLine2" name="Address Line 2" class="k-textbox input-name" data-bind="value: addressLine2" /></div>
                            <div class="editor-label"><label for="city">City:</label></div>
                            <div class="editor-field"><input id="city" name="City" class="k-textbox input-city" required data-bind="value: city" /></div>
                            <div class="editor-label"><label for="state">State:</label></div>
                            <div class="editor-field">
                                <input id="ddlStates" value="Choose one" class="input-dropdown" />
                            </div>
                            <div class="editor-label"><label for="zip">Zip:</label></div>
                            <div class="editor-field"><input id="zip" name="Zip" class="k-textbox input-zip" required data-bind="value: zip" /></div>
                            <div class="editor-label"><label for="email">Email:</label></div>
                            <div class="editor-field"><input type="text" id="email" name="Email Address" class="k-textbox input-name" required data-bind="value: emailAddress" /></div>
                            <div class="editor-label"><label for="mobile">Mobile Phone:</label></div>
                            <div class="editor-field"><input type="text" id="mobile" name="Mobile Number" class="k-textbox input-phone" data-bind="value: mobileNumber" data-role='maskedtextbox' data-mask="999-000-0000" /></div>
                            <div class="editor-label"><label for="mobile">Office Phone:</label></div>
                            <div class="editor-field"><input type="text" id="office" name="Office Number" class="k-textbox input-phone" data-bind="value: officeNumber" data-role='maskedtextbox' data-mask="999-000-0000" /></div>
                            <div class="editor-label"><label for="fax">Fax:</label></div>
                            <div class="editor-field"><input type="text" id="fax" name="Fax Number" class="k-textbox input-phone" data-bind="value: faxNumber" data-role='maskedtextbox' data-mask="999-000-0000" /></div>
                            <br />
                            <div class="editor-field"><input type="checkbox" id="sameAsClientAddress" value="sameAsClient"> Same as above </div>

                            <br />
                            <div class="editor-label"><label for="billToName">Bill To Name:</label></div>
                            <div class="editor-field"><input type="text" id="billToName" name="Bill To Name" class="k-textbox input-name" required data-bind="value: billToName" /></div>
                            <div class="editor-label"><label for="billToAddressLine1">Bill To Address Line 1:</label></div>
                            <div class="editor-field"><input type="text" id="billToAddressLine1" name="Bill To Address Line 1" class="k-textbox input-name" required data-bind="value: billToAddressLine1" /></div>
                            <div class="editor-label"><label for="billToAddressLine2">Bill To Address Line 2:</label></div>
                            <div class="editor-field"><input type="text" id="billToAddressLine2" name="Bill To Address Line 2" class="k-textbox input-name" data-bind="value: billToAddressLine2" /></div>
                            <div class="editor-label"><label for="billTocity">Bill To City:</label></div>
                            <div class="editor-field"><input id="billToCity" name="Bill To City" class="k-textbox input-city" required data-bind="value: billToCity" /></div>
                            <div class="editor-label"><label for="billToState">Bill To State:</label></div>
                            <div class="editor-field">
                                <input id="ddlBillToStates" value="Choose one" class="input-dropdown" />
                            </div>
                            <div class="editor-label"><label for="billToZip">Bill To Zip:</label></div>
                            <div class="editor-field"><input id="billToZip" name="Bill To Zip" class="k-textbox input-zip" required data-bind="value: billToZip" /></div>
                            <br />
                            <div class="editor-label"><label for="complimentaryWait">Complimentary Weight:</label></div>
                            <div class="editor-field"><input type="text" id="compWeight" name="Complimentary Weight" class="k-textbox input-weight" required data-bind="value: complimentaryWeight" /></div>
                            <div class="editor-label"><label for="weightRate">Weight rate cents per pound:</label></div>
                            <div class="editor-field"><input type="text" id="weightRate" name="Weight Rate" class="k-textbox input-weight" required data-bind="value: weightRate" /></div>
                            <div class="editor-label"><label for="basePickup">Base pickup charge:</label></div>
                            <div class="editor-field"><input type="text" id="basePickup" name="Base Pickup" class="k-textbox input-weight" required data-bind="value: basePickupCharge" /></div>
                            <br />

                            <br />
                            <br />
                            <div style="display:table; margin-left: 216px; margin-top:10px;">
                                <div style="display:table-row">
                                    <div style="display:table-cell; padding-right:5px;">
                                        <button data-bind="click: register" class="button_Save">Save</button>
                                    </div>
                                    <div style="display:table-cell;">
                                        <button data-bind="click: startOver" class="button_StartOver">Start Over</button>
                                    </div>
                                </div>
                                <div id="loader" style="display:none; font:bold; color:darkblue">Saving.... Please wait</div>
                            </div>
                            <br />
                        </td>
                    </tr>
                </table>

            </form>
        </div>
    </div>
</div>


    <button onclick="printDiv()">Print</button>

    <script>

        $(document).ready(function () {
            if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                document.getElementById("footer").style.display = "none";
                document.getElementById("navBar").style.minHeight = "20px";
            }
            //$('#loader').show();
            loadStateNames();
            loadBillToStateNames();

            $('#sameAsClientAddress').click(function(){
                var atLeastOneIsChecked = $('#sameAsClientAddress:checkbox:checked').length > 0;
                if (atLeastOneIsChecked) {
                    fillSameAsClientAddress();
                }
            });

            LoadInvoice();

            Init();
        });

        function LoadInvoice()
        {
            document.getElementById("divCompanyNameAndAddress").innerHTML = "TIGER LOGISTICS INC." 
                                                                            + "</br>" 
                                                                            + "P.O. BOX 128"
                                                                            + "</br>" 
                                                                            + "JAMAICA" + "NY" + "11753"
                                                                            + "</br>";

            document.getElementById("divCompanyPhoneAndFax").innerHTML = "TEL: " + "(516) 639 8131" + "</br>" 
                                                                         + "FAX: " + "(516) 639 8132 ";
            
        }




        function printDivWorking()
        {
            //Get the HTML of div
            var divElements = document.getElementById("divInvoice").innerHTML;
            //Get the HTML of whole page
            var oldPage = document.body.innerHTML;

            //Reset the page's HTML with div's HTML only
            document.body.innerHTML = 
              "<html><head><title></title></head><body>" +
              divElements 
              +      "<style>dl{ width: 100%; overflow: hidden;background: rgb(206,220,231);padding: 0;margin: 0;} dt {float: left;width: 50%;background: rgb(206,220,231);padding: 0; margin: 0;}dd {float: left;width: 50%;background: rgb(206,220,231);padding: 0;margin: 0;} </style>" 
              + "</body>";

            //Print Page
            window.print();

            //Restore orignal HTML
            document.body.innerHTML = oldPage;

        }

        function printDiv()
        {
            //Get the HTML of div
            var divElements = document.getElementById("divInvoice").innerHTML;
            //Get the HTML of whole page
            var oldPage = document.body.innerHTML;

            //Reset the page's HTML with div's HTML only
            document.body.innerHTML = 
              "<html><head><title></title></head><body>" +
              divElements 
              + "</body>";

            //Print Page
            window.print();

            //Restore orignal HTML
            document.body.innerHTML = oldPage;
        }
        function error_handler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function() {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
        }



        function onChange(arg) {
            var grid = $("#AllInvoicesGrid").data("kendoGrid");
            var selectedItem = grid.dataItem(grid.select());
            //alert(selectedItem.CompanyName);


            var parms = {
                clientCompanyString: selectedItem.CompanyName
            };


            $.ajax({
                type: "GET",
                traditional: true,
                url: '@Url.Action("GetClientInfo", "MyClients")',
                async: true,
                data: parms,
                dataType: "json",
                beforeSend: function (xhr) {
                    $('#loader').show();
                },
                success: function (response, textStatus, jqXHR) {
                    //alert(response.message.CompanyName);
                    $('#loader').hide();
                    Init(response.message);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert("Error found during execution");
                    $('#loader').hide();
                }
            });


            @*document.getElementById("selectedItemImageOriginal").src = "@Url.Content("~/content/products/{0}?{1}")".format(selectedItem.OriginalImageId, new Date().getTime());
            document.getElementById("selectedItemImageOne").src = "@Url.Content("~/content/products/{0}?{1}")".format(selectedItem.ImageIdOne, new Date().getTime());
            document.getElementById("selectedItemImageTwo").src = "@Url.Content("~/content/products/{0}?{1}")".format(selectedItem.ImageIdTwo, new Date().getTime());
            document.getElementById("selectedItemImageThree").src = "@Url.Content("~/content/products/{0}?{1}")".format(selectedItem.ImageIdThree, new Date().getTime());
            document.getElementById("selectedItemImageFour").src = "@Url.Content("~/content/products/{0}?{1}")".format(selectedItem.ImageIdFour, new Date().getTime());
            document.getElementById("selectedItemImageFive").src = "@Url.Content("~/content/products/{0}?{1}")".format(selectedItem.ImageIdFive, new Date().getTime());

            document.getElementById("idProductID").value = selectedItem.ProductID;*@

        }

        function onRequestEnd(e) {

            if (e.type == "update" && !e.response.Errors) {
                alert("product updated");
            }

            if (e.type == "destroy" && !e.response.Errors) {
                alert("Producdt deleted");
            }

        }



        function fillSameAsClientAddress()
        {
            alert("Fill billing address here");

            //document.getElementById("billToName").value =  document.getElementById("cname").value;
            //document.getElementById("billToAddressLine1").value =  document.getElementById("addressLine1").value;
            //document.getElementById("billToAddressLine2").value =  document.getElementById("addressLine2").value;
            //document.getElementById("billToCity").value =  document.getElementById("city").value;
            //document.getElementById("billToZip").value =  document.getElementById("zip").value;
            //ddlBillToStates.value = ddlStates.value;
            //ddlBillToStates.text = ddlStates.value;


            var puForm = @Html.Raw(Json.Encode(ViewData["PU_FORM"]));
            //var companyName = ViewData["PU_FROM"];
            //alert(puForm.CompanyName);

            ddlBillToStates.value = ddlStates.value;
            //ddlBillToStates.optionLabel = ddlStates.value;
            var ddl = $("#ddlBillToStates").data("kendoDropDownList");
            ddl.value(ddlStates.value);

            //Leave following line. Without this line viewmode binding doesn't work for some reason
            cname.value = document.getElementById("cname").value;

            var viewModel = kendo.observable({
                companyName: document.getElementById("cname").value,
                contactPerson: document.getElementById("contactPerson").value,
                addressLine1: document.getElementById("addressLine1").value,
                addressLine2: document.getElementById("addressLine2").value,
                city: document.getElementById("city").value,
                zip: document.getElementById("zip").value,
                emailAddress: document.getElementById("email").value,
                mobileNumber: document.getElementById("mobile").value,
                officeNumber: document.getElementById("office").value,
                faxNumber: document.getElementById("fax").value,
                billToName: document.getElementById("cname").value,
                billToAddressLine1: document.getElementById("addressLine1").value,
                billToAddressLine2: document.getElementById("addressLine2").value,
                billToCity: document.getElementById("city").value,
                billToZip: document.getElementById("zip").value,
                complimentaryWeight : document.getElementById("compWeight").value,
                weightRate : document.getElementById("weightRate").value,
                basePickupCharge : document.getElementById("basePickup").value,


                agreed: false,
                confirmed: false,
                register: saveCompanyInfo,
                startOver: function () {
                    this.set("confirmed", false);
                    this.set("agreed", false);
                    this.set("companyName", puForm.CompanyName);
                    this.set("contactPerson", puForm.ContactPerson);
                    this.set("addressLine1", puForm.AddressLine1);
                    this.set("city", puForm.City);
                    this.set("zip", puForm.Zip);
                    this.set("emailAddress", puForm.Email);
                    this.set("mobileNumber", puForm.MobileNumber);
                    this.set("officeNumber", puForm.OfficeNumber);
                    this.set("faxNumber", puForm.FaxNumber);
                    this.set("billToName", puForm.BillToName);
                    this.set("billToAddressLine1", puForm.BillToAddressLine1);
                    this.set("billToAddressLine2", puForm.BillToAddressLine2);
                    this.set("billToCity", puForm.BillToCity);
                    this.set("billToZip", puForm.BillToZip);
                }
            });




            kendo.bind($("#puform"), viewModel);



        }
        function LookupHandler(jqXHR) {

            if (jqXHR.status == 200)
                return;

            FailureHandler(jqXHR);
        }

        function loadStateNames() {
            var puForm = @Html.Raw(Json.Encode(ViewData["PU_FORM"]));

            $("#ddlStates").kendoDropDownList({
                dataSource: {
                    type: "json",
                    transport: {
                        read: {
                            url: '@Url.Action("GetStates", "MyCompany")',
                            complete: LookupHandler
                        }
                    }
                },
                //change: onCaseNameChange,
                //dataBound: onCaseListDataBound,
                // change: Module1.ddl_fund_Change,
                optionLabel: puForm.State,
                value: puForm.State
            });

        }

        function loadBillToStateNames() {
            var puForm = @Html.Raw(Json.Encode(ViewData["PU_FORM"]));

            $("#ddlBillToStates").kendoDropDownList({
                dataSource: {
                    type: "json",
                    transport: {
                        read: {
                            url: '@Url.Action("GetStates", "MyCompany")',
                            complete: LookupHandler
                        }
                    }
                },
                //change: onCaseNameChange,
                //dataBound: onCaseListDataBound,
                // change: Module1.ddl_fund_Change,
                optionLabel: puForm.BillToState,
                value: puForm.BillToState
            });

        }


        function saveCompanyInfo(e) {
            e.preventDefault();

            var validator = $("#puform").kendoValidator().data("kendoValidator");


            if (!ddlStates.value ) {
                alert("Pick a valid state: " + ddlStates.value);
                return;
            }

            if (!ddlBillToStates.value ) {
                alert("Pick a valid bill to state: " + ddlBillToStates.value);
                return;
            }

            if (validator.validate()) {
                //alert("call db here");


                var company = {
                    "CompanyName": this.get("companyName"),
                    "ContactPerson": this.get("contactPerson"),
                    "AddressLine1": this.get("addressLine1"),
                    "AddressLine2": this.get("addressLine2"),
                    "City": this.get("city"),
                    "State": ddlStates.value,
                    "Zip": this.get("zip"),
                    "Email": this.get("emailAddress"),
                    "MobileNumber": this.get("mobileNumber"),
                    "OfficeNumber": this.get("officeNumber"),
                    "FaxNumber": this.get("faxNumber"),
                    "BillToName": this.get("billToName"),
                    "BillToAddressLine1": this.get("billToAddressLine1"),
                    "BillToAddressLine2": this.get("billToAddressLine2"),
                    "BillToCity": this.get("billToCity"),
                    "BillToState": ddlBillToStates.value,
                    "BillToZip": this.get("billToZip"),
                    "ComplimentaryWeight": this.get("complimentaryWeight"),
                    "WeightRate": this.get("weightRate"),
                    "BasePickupCharge": this.get("basePickupCharge")

                };

                var parms = {
                    clientCompanyString: JSON.stringify(company)
                };


                $.ajax({
                    type: "POST",
                    traditional: true,
                    url: '@Url.Action("SaveClientInfo", "MyClients")',
                    async: true,
                    data: parms,
                    dataType: "json",
                    beforeSend: function (xhr) {
                        $('#loader').show();
                    },
                    success: function (response, textStatus, jqXHR) {
                        //alert(response.message);
                        $('#loader').hide();
                        $("#AllInvoicesGrid").data("kendoGrid").dataSource.read();
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert("Error found during execution");
                        $('#loader').hide();
                    }
                });

                this.set("confirmed", true);
            }


        }


        //$(document).ready(Init);

        function Init(e) {

            var puForm = e;
            if(puForm==null)
                 puForm = @Html.Raw(Json.Encode(ViewData["PU_FORM"]));
            //var companyName = ViewData["PU_FROM"];
            //alert(puForm.CompanyName);

            ddlStates.value = puForm.Sate;
            ddlBillToStates.value = puForm.BillToState;
            //Leave following line. Without this line viewmode binding doesn't work for some reason
            cname.value = puForm.CompanyName;

            var viewModel = kendo.observable({
                companyName: puForm.CompanyName,
                contactPerson: puForm.ContactPerson,
                addressLine1: puForm.AddressLine1,
                addressLine2: puForm.AddressLine2,
                city: puForm.City,
                zip: puForm.Zip,
                emailAddress: puForm.Email,
                mobileNumber: puForm.MobileNumber,
                officeNumber: puForm.OfficeNumber,
                faxNumber: puForm.FaxNumber,
                billToName: puForm.BillToName,
                billToAddressLine1: puForm.BillToAddressLine1,
                billToAddressLine2: puForm.BillToAddressLine2,
                billToCity: puForm.BillToCity,
                billToZip: puForm.BillToZip,
                complimentaryWeight: puForm.ComplimentaryWeight,
                weightRate: puForm.WeightRate,
                basePickupCharge: puForm.BasePickupCharge,


                agreed: false,
                confirmed: false,
                register: saveCompanyInfo,
                startOver: function () {
                    this.set("confirmed", false);
                    this.set("agreed", false);
                    this.set("companyName", puForm.CompanyName);
                    this.set("contactPerson", puForm.ContactPerson);
                    this.set("addressLine1", puForm.AddressLine1);
                    this.set("city", puForm.City);
                    this.set("zip", puForm.Zip);
                    this.set("emailAddress", puForm.Email);
                    this.set("mobileNumber", puForm.MobileNumber);
                    this.set("officeNumber", puForm.OfficeNumber);
                    this.set("faxNumber", puForm.FaxNumber);
                    this.set("billToName", puForm.BillToName);
                    this.set("billToAddressLine1", puForm.BillToAddressLine1);
                    this.set("billToAddressLine2", puForm.BillToAddressLine2);
                    this.set("billToCity", puForm.BillToCity);
                    this.set("billToZip", puForm.BillToZip);
                    this.set("complimentaryWeight", puForm.ComplimentaryWeight);
                    this.set("weightRate", puForm.WeightRate);
                    this.set("basePickupCharge", puForm.BasePickupCharge);

                }
            });




            kendo.bind($("#puform"), viewModel);
        }
    </script>

    <style>
        .inputFormTable {
            position: relative;
            width: 500px; /* for IE 6 */
            min-height: 500px;
            border-radius: 25px; /* Gives any image a round corner */
            /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#cedce7+0,596a72+100 */
            background: rgb(206,220,231); /* Old browsers */
            background: -moz-linear-gradient(top, rgba(206,220,231,1) 0%, rgba(89,106,114,1) 100%); /* FF3.6-15 */
            background: -webkit-linear-gradient(top, rgba(206,220,231,1) 0%,rgba(89,106,114,1) 100%); /* Chrome10-25,Safari5.1-6 */
            background: linear-gradient(to bottom, rgba(206,220,231,1) 0%,rgba(89,106,114,1) 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
            filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#cedce7', endColorstr='#596a72',GradientType=0 ); /* IE6-9 */
        }

        .editor-label {
            margin-left: 20px;
            margin-bottom: 2px;
            float: left;
            width: 200px;
            text-align: right;
            color: #244062;
            text-shadow: 0px 0px 0px #244062;
            font-size: 12px;
            font-family: Corbel;
            font-weight: bold;
        }

        .editor-field {
            margin-left: 100px;
        }

        .bodyMainMessage1 {
            text-align: center;
            color: #244062;
            text-shadow: 0px 0px 0px #244062;
            font-size: 18px;
            font-family: Corbel;
            font-weight: bold;
        }


        .button_Save {
            border: 1px solid #7eb9d0;
            -webkit-border-radius: 3px;
            -moz-border-radius: 3px;
            border-radius: 3px;
            font-size: 12px;
            font-family: arial, helvetica, sans-serif;
            padding: 10px 10px 10px 10px;
            text-decoration: none;
            display: inline-block;
            text-shadow: -1px -1px 0 rgba(0,0,0,0.3);
            font-weight: bold;
            color: #FFFFFF;
            background-color: #a7cfdf;
            background-image: -webkit-gradient(linear, left top, left bottom, from(#a7cfdf), to(#23538a));
            background-image: -webkit-linear-gradient(top, #a7cfdf, #23538a);
            background-image: -moz-linear-gradient(top, #a7cfdf, #23538a);
            background-image: -ms-linear-gradient(top, #a7cfdf, #23538a);
            background-image: -o-linear-gradient(top, #a7cfdf, #23538a);
            background-image: linear-gradient(to bottom, #a7cfdf, #23538a);
            filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=#a7cfdf, endColorstr=#23538a);
        }


            .button_Save:hover {
                border: 1px solid #5ca6c4;
                background-color: #82bbd1;
                background-image: -webkit-gradient(linear, left top, left bottom, from(#82bbd1), to(#193b61));
                background-image: -webkit-linear-gradient(top, #82bbd1, #193b61);
                background-image: -moz-linear-gradient(top, #82bbd1, #193b61);
                background-image: -ms-linear-gradient(top, #82bbd1, #193b61);
                background-image: -o-linear-gradient(top, #82bbd1, #193b61);
                background-image: linear-gradient(to bottom, #82bbd1, #193b61);
                filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=#82bbd1, endColorstr=#193b61);
            }

        .button_StartOver {
            border: 1px solid #72021c;
            -webkit-border-radius: 3px;
            -moz-border-radius: 3px;
            border-radius: 3px;
            font-size: 12px;
            font-family: arial, helvetica, sans-serif;
            padding: 10px 10px 10px 10px;
            text-decoration: none;
            display: inline-block;
            text-shadow: -1px -1px 0 rgba(0,0,0,0.3);
            font-weight: bold;
            color: #FFFFFF;
            background-color: #a90329;
            background-image: -webkit-gradient(linear, left top, left bottom, from(#a90329), to(#6d0019));
            background-image: -webkit-linear-gradient(top, #a90329, #6d0019);
            background-image: -moz-linear-gradient(top, #a90329, #6d0019);
            background-image: -ms-linear-gradient(top, #a90329, #6d0019);
            background-image: -o-linear-gradient(top, #a90329, #6d0019);
            background-image: linear-gradient(to bottom, #a90329, #6d0019);
            filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=#a90329, endColorstr=#6d0019);
        }


            .button_StartOver:hover {
                border: 1px solid #450111;
                background-color: #77021d;
                background-image: -webkit-gradient(linear, left top, left bottom, from(#77021d), to(#3a000d));
                background-image: -webkit-linear-gradient(top, #77021d, #3a000d);
                background-image: -moz-linear-gradient(top, #77021d, #3a000d);
                background-image: -ms-linear-gradient(top, #77021d, #3a000d);
                background-image: -o-linear-gradient(top, #77021d, #3a000d);
                background-image: linear-gradient(to bottom, #77021d, #3a000d);
                filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=#77021d, endColorstr=#3a000d);
            }

        .container {
            margin-left: 0;
        }

        .body-content {
            margin-left: 0;
        }

        body {
            padding-top: 100px;
            padding-bottom: 20px;
            background-image: url(../Content/pageBackgroundImage2.jpg);
            bottom: 0;
            position: absolute;
            width: 100%;
            height: 100%;
            background-size: 100%;
        }
    </style>

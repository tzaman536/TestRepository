@{
    ViewBag.Title = "Active RFQs";
}
@using RnzssWeb.Models
<div class="page-container">
    <div id="rfqentryform" class="admin-page-container">
        <div id="searchgrid">
            <div id="wrapper">
                <div id="first">
                    <input type="search" id="searchbox" style="width: 100%;" />
                </div>
                <div id="second">
                    <div class="demo-hint">Type RFQ number, solicitation number or company name here</div>
                </div>
            </div>

        </div>



        <div class="rnz-grid-container">
            @(Html.Kendo().Grid<RequestForQuote>()
                                .Name("grid-rfq")
                                .Columns(columns =>
                                {
                                    columns.Bound(p => p.RFQNo).Template(@<text></text>).ClientTemplate("<a href='" + Url.Action("RfqEntry", "Rfq") + "?RFQNo=#=RFQNo#'>#=RFQNo#</a>").Title("RFQ No.").Width(75);
                                    columns.Bound(p => p.SolicitationNumber).Width(75);
                                    columns.Bound(p => p.DueDate).Width(75).Format("{0:MM/dd/yyyy}"); 
                                    columns.Bound(p => p.RfqEvent).Template(@<text></text>).ClientTemplate("<a href='" + Url.Action("RfqEvent", "Rfq") + "?RFQNo=#=RFQNo#'>#=RfqEvent#</a>").Title("Rfq Log").Width(50);
                                    columns.Bound(p => p.CompanyName).Width(75);
                                    columns.Bound(p => p.Attention).Width(75);
                                    //columns.Bound(p => p.CompanyAddress).Width(150);
                                    //columns.Bound(p => p.PhoneNo).Width(75);
                                    //columns.Bound(p => p.FaxNo).Width(75);
                                    columns.Bound(p => p.Email).Width(75);
                                    columns.Bound(p => p.Comment).Width(75);
                                    columns.Bound(p => p.UpdateDate).Width(100).Format("{0:MM/dd/yyyy hh:mm:ss tt}");
                                    columns.Command(command => { command.Edit(); command.Destroy(); }).Width(100);
                                })
                                //.ToolBar(toolBar => toolBar.Template("<a class='k-button k-button-icontext' onclick='addAnotherProduct()' href='#'></span>Add Another Product</a>"))
                                .Editable(editable => editable.Mode(GridEditMode.InLine))
                                .Pageable()
                                .Sortable()
                                .Filterable()
                                .Scrollable(scr => scr.Height(800))
                                .Excel(excel => excel
                                    .AllPages(true)
                                    .FileName("Index Rates Export.xlsx")
                                    .Filterable(true)
                                    .ProxyURL(Url.Action("Excel_Export_Save", "Carry"))
                                )
                                .Events(events => events.Edit("onEdit"))
                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .PageSize(100)
                                    .Events(events => events.Error("error_handler").RequestEnd("onRequestEnd"))
                                    .Model(model =>
                                    {
                                        model.Id(p => p.RequestForQuoteId);
                                        model.Field(p => p.RFQNo).Editable(false);
                                        model.Field(p => p.UpdateDate).Editable(false);
                                        model.Field(p => p.RfqEvent).Editable(false);
                                    })
                                    .Read(read => read.Action("Rfq_Read", "Rfq"))
                                    .Update(update => update.Action("Rfq_Update", "Rfq"))
                                    .Destroy(update => update.Action("Rfq_Destroy", "Rfq"))
                                )
            )
        </div>
    </div>
</div>

<script>
    function onEdit() {

    }
    function error_handler() {

    }

    function onRequestEnd(e) {
        if (e.type == 'update' || e.type == "create" || e.type == "destroy") {
            //document.getElementById("pageMessage").innerHTML = e.response.myMessage;
            if (e.response.myMessage.indexOf('ERROR') >= 0) {
                alert(e.response.myMessage)
            }
            else {
                $('#grid-rfq').data('kendoGrid').dataSource.read();
                $('#grid-rfq').data('kendoGrid').refresh();
            }

        }
    }
    function reloadProductInformationGrid() {
        $('#grid-rfq').data('kendoGrid').dataSource.read();
        $('#grid-rfq').data('kendoGrid').refresh();
    }



    function initSearch(){
         $("#searchbox").keyup(function () {
            var val = $('#searchbox').val();
            $("#grid-rfq").data("kendoGrid").dataSource.filter({
                logic: "or",
                filters: [
                    {
                        field: "RFQNo",
                        operator: "contains",
                        value: val
                    },
                    {
                        field: "SolicitationNumber",
                        operator: "contains",
                        value: val
                    },
                    {
                        field: "CompanyName",
                        operator: "contains",
                        value: val
                    }

                ]
            });


        });
    }

    $(document).ready(function () {

       
        initSearch();
        reloadProductInformationGrid();
    });
</script>


<style>
</style>





